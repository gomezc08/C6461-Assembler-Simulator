Assembler converts assembly language to machine code.
Two output files needed...
    - Listing file: translation of assembly code (along with errors).
    - Load file: contains the machine code that the computer can execute


To do this, the assembler looks at two passes...
    - Pass 1: Scans through the source file (file with assembly code) to assign memory locations to labels (and to check for syntax errors).
    - Pass 2: Converts EACH assembly instruction -> machine code 

Example of source file.

Label   Opcode  Operand     Comments
        LOC     6           ;BEGIN AT LOCATION 6
        Data    10          ;PUT 10 AT LOCATION 6
        Data    3           ;PUT 3 AT LOCATION 7
        Data    End         ;PUT 1024 AT LOCATION 8
        Data    0
        Data    12
        Data    9
        Data    18
        Data    12
        LDX     2,7         ;X2 GETS 3
        LDR     3,0,10      ;R3 GETS 12
        LDR     2,2,10      ;R2 GETS 12
        LDR     1,2,10,1    ;R1 GETS 18
        LDA     0,0,0       ;R0 GETS 0 to set CONDITION CODE
        LDX     1,8         ;X1 GETS 1024
        JZ      0,1,0       ;JUMP TO End IF R0 = 0
        LOC     1024
End:    HLT                 ;STOP

After pass 2, the assembler should ouput the machine code + the original source code...
Example of output file...

Memory Address (octal)      Machine code representation of the instruction or data.     Source file...s
000006                      000012                                                      Data 10          ;PUT 10 AT LOCATION 6
000007                      000003                                                      Data 3           ;PUT 3 AT LOCATION 7
000008                      002000                                                      Data End         ;PUT 1024 AT LOCATION 8
000009                      000000                                                      Data 0           
00000A                      000014                                                      Data 12          
00000B                      000011                                                      Data 9           
00000C                      000022                                                      Data 18          
00000D                      000014                                                      Data 12          
00000E                      102207                                                      LDX 2,7          ;X2 GETS 3
00000F                      003412                                                      LDR 3,0,10       ;R3 GETS 12
000010                      003212                                                      LDR 2,2,10       ;R2 GETS 12
000011                      002652                                                      LDR 1,2,10,1     ;R1 GETS 18
000012                      006000                                                      LDA 0,0,0        ;R0 GETS 0 to set CONDITION CODE
000013                      102110                                                      LDX 1,8          ;X1 GETS 1024
000014                      020100                                                      JZ 0,1,0         ;JUMP TO End IF R0 = 0
002000                      000000                                                      End: HLT         ;STOP


However, just note the load file is what the computer will actually read. 
So basically for the load file, it's the output file - source file...
Example of load file...

000006 000012
000007 000003
000008 002000
000009 000000
00000A 000014
00000B 000011
00000C 000022
00000D 000014
00000E 102207
00000F 003412
000010 003212
000011 002652
000012 006000
000013 102110
000014 020100
002000 000000

Example 1.

Source file: LDX 2,7 ;X2 GETS 3
    Opcode (LDX) -  41 (According to pg 10 of pdf).
    X            -  2
    Address      -  7

Turn into binary...
Opcode | X | I | Address
100001  | 10  | 0 | 00111
10000110000111 (binary, 14 bits)
00 10000110000111 (add 2 extra bits to get a total of 16 bits)

REMEMBER, READ FROM RIGHT TO LEFT!!!!!!!

1 or 2?

0 010 000 110 000 111
0 2   0   6   0   7

10 000 110 000 111
2  0   6   0   7

= 020607 (octal)

Example 2.
Source File: LDR 3,0,10
    Opcode: LDR (01)
    r = 3
    IX: 0
    Address: 10

Opcode | R | IX | I | Address
000001  11  00    0  01010

= 0000011100001010


0 000 011 100 001 010
0 0   3   4   1    2
= 003412